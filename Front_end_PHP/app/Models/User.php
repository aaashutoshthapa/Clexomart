<?php

/**
 * User Model
 * 
 * This model represents user accounts in the ClexoMart e-commerce system.
 * It handles all user-related operations including authentication, authorization,
 * and role-based access control for customers, traders, and administrators.
 * 
 * Key Features:
 * - Maps to USER1 table in Oracle database (USER is reserved word)
 * - Custom string-based primary key generation
 * - Role-based user types (customer, trader, admin)
 * - Email verification system with OTP
 * - Admin approval workflow for traders
 * - Profile image handling with BLOB storage
 * - Oracle timestamp compatibility
 * 
 * Database Table: USER1
 * Primary Key: user_id (string, 8 characters, non-incrementing)
 * 
 * User Types:
 * - customer: End users who purchase products
 * - trader: Merchants who create shops and sell products
 * - admin: System administrators with full access
 * 
 * Authentication Flow:
 * 1. Registration with role selection
 * 2. OTP email verification
 * 3. Admin approval (traders only)
 * 4. Account activation
 * 5. Login and session management
 * 
 * @package App\Models
 * @author ClexoMart Development Team
 * @version 1.0
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * User Model Class
 * 
 * Eloquent model for user account management with Oracle database integration
 * Supports role-based authentication and email verification
 */
class User extends Model
{
    use HasFactory;

    /**
     * The table associated with the model.
     * 
     * Points to USER1 table in Oracle database (USER is a reserved word).
     * Contains all user account information including credentials, profile data,
     * and verification status.
     * 
     * @var string
     */
    protected $table = 'USER1';

    /**
     * The primary key for the model.
     * 
     * Uses user_id as primary key instead of default 'id'.
     * Custom 8-character alphanumeric string (e.g., 'USER0001', 'A1B2C3D4').
     * 
     * @var string
     */
    protected $primaryKey = 'user_id';
    
    /**
     * Indicates if the IDs are auto-incrementing.
     * 
     * Set to false because we use custom string-based IDs
     * generated by the generateUserId() method.
     * 
     * @var bool
     */
    public $incrementing = false;
    
    /**
     * The "type" of the auto-incrementing ID.
     * 
     * Set to string because user_id is VARCHAR2(8) in Oracle database.
     * 
     * @var string
     */
    protected $keyType = 'string';
    
    /**
     * Indicates if the model should be timestamped.
     * 
     * Set to true to enable automatic created_at and updated_at management.
     * Uses Oracle-compatible timestamp column names.
     * 
     * @var bool
     */
    public $timestamps = true;

    /**
     * The name of the "created at" column.
     * 
     * Maps to Oracle's CREATED_AT column (uppercase as per Oracle convention).
     * Automatically managed by Laravel when creating records.
     */
    const CREATED_AT = 'CREATED_AT';
    
    /**
     * The name of the "updated at" column.
     * 
     * Maps to Oracle's UPDATED_AT column (uppercase as per Oracle convention).
     * Automatically updated by Laravel when modifying records.
     */
    const UPDATED_AT = 'UPDATED_AT';

    /**
     * The attributes that are mass assignable.
     * 
     * These fields can be safely assigned using create() or fill() methods.
     * Includes all user profile fields, authentication data, and verification status.
     * 
     * Security Note: 'password' and 'otp' are fillable here but hidden in output.
     * 
     * @var array
     */
    protected $fillable = [
        'user_id',                      // Custom primary key
        'first_name',                   // User's first name
        'last_name',                    // User's last name
        'user_type',                    // Role: customer, trader, admin
        'email',                        // Email address (unique)
        'contact_no',                   // Phone number
        'password',                     // Hashed password
        'otp',                         // One-time password for verification
        'is_verified',                 // Email verification status
        'otp_expires_at',              // OTP expiration timestamp
        'user_image',                  // Profile picture (BLOB)
        'USER_IMAGE_MIMETYPE',         // Image MIME type
        'USER_IMAGE_FILENAME',         // Original image filename
        'USER_IMAGE_LASTUPD'           // Image last update timestamp
    ];

    /**
     * The attributes that should be cast to native types.
     * 
     * Automatic type conversion for better data handling:
     * - Boolean casting for verification status
     * - DateTime casting for timestamps
     * - Integer casting for numeric fields
     * 
     * @var array
     */
    protected $casts = [
        'is_verified' => 'boolean',             // 0/1 to true/false conversion
        'otp_expires_at' => 'datetime',         // Timestamp to Carbon instance
        'contact_no' => 'integer',              // String to integer conversion
        'USER_IMAGE_LASTUPD' => 'datetime',     // Image update timestamp
    ];

    /**
     * The attributes that should be hidden for serialization.
     * 
     * These sensitive fields are excluded from JSON output and arrays
     * to prevent accidental exposure of security-critical information.
     * 
     * @var array
     */
    protected $hidden = [
        'password',                             // Never expose password hashes
        'otp',                                 // Never expose verification codes
    ];

    /**
     * Generate a unique user ID for new accounts
     * 
     * Creates an 8-character alphanumeric string that's guaranteed to be unique
     * across all existing users. Uses a retry mechanism to handle collisions.
     * 
     * ID Format: 8 characters using 0-9 and A-Z
     * Examples: 'A1B2C3D4', '12345678', 'ABCDEFGH'
     * 
     * Collision Handling:
     * - Generates random ID
     * - Checks database for uniqueness
     * - Retries if collision detected
     * - Returns guaranteed unique ID
     * 
     * @return string Unique 8-character user ID
     */
    public static function generateUserId()
    {
        // Character Set: Alphanumeric uppercase for consistency
        $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        
        do {
            $userId = '';
            
            // Generate 8-character random string
            for ($i = 0; $i < 8; $i++) {
                $userId .= $characters[rand(0, strlen($characters) - 1)];
            }
            
            // Uniqueness Check: Ensure ID doesn't already exist
        } while (self::where('user_id', $userId)->exists());
        
        return $userId;
    }
}
