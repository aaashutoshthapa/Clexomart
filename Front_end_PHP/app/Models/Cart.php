<?php
/**
 * Cart Model
 * 
 * This model represents the shopping cart entity in the ClexoMart e-commerce system.
 * Each cart is associated with a user and can contain multiple products.
 * 
 * Key Features:
 * - Maps to CART table in Oracle database
 * - Uses custom string-based primary key (cart_id)
 * - Manages relationships with User and Product models
 * - Handles cart-to-order conversion
 * 
 * Database Table: CART
 * Primary Key: cart_id (string, non-incrementing)
 * 
 * @package App\Models
 * @author ClexoMart Development Team
 * @version 1.0
 */

// app/Models/Cart.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * Cart Model Class
 * 
 * Handles shopping cart data and relationships in the ClexoMart system
 */
class Cart extends Model
{
    /**
     * The table associated with the model.
     * 
     * Points to the CART table in Oracle database which stores:
     * - cart_id: Unique identifier (e.g., 'cart0001')
     * - user_id: Reference to the cart owner
     * - creation_date: When the cart was created
     * 
     * @var string
     */
    protected $table = 'CART';

    /**
     * The primary key for the model.
     * 
     * Uses cart_id as primary key instead of default 'id'
     * Format: 'cart' + 4-digit sequence number (e.g., 'cart0001')
     * 
     * @var string
     */
    protected $primaryKey = 'cart_id';
    
    /**
     * Indicates if the IDs are auto-incrementing.
     * 
     * Set to false because we use custom string-based IDs
     * generated by Oracle triggers (e.g., 'cart0001', 'cart0002')
     * 
     * @var bool
     */
    public $incrementing = false;
    
    /**
     * The "type" of the auto-incrementing ID.
     * 
     * Set to string because cart_id is VARCHAR2(8) in database
     * 
     * @var string
     */
    protected $keyType = 'string';
    
    /**
     * Indicates if the model should be timestamped.
     * 
     * Set to false because CART table doesn't have created_at/updated_at columns
     * Only has creation_date which is managed manually
     * 
     * @var bool
     */
    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     * 
     * These fields can be safely assigned using create() or fill() methods
     * cart_id is auto-generated by database trigger, so not included
     * 
     * @var array
     */
    protected $fillable = ['user_id','creation_date'];

    /**
     * Define relationship with User model
     * 
     * Each cart belongs to exactly one user (customer)
     * This creates a many-to-one relationship where:
     * - Multiple carts can belong to one user (historical carts)
     * - Each cart has exactly one owner
     * 
     * Foreign Key: user_id in CART table
     * References: user_id in USER1 table
     * 
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user() 
    { 
        return $this->belongsTo(User::class,'user_id'); 
    }
    
    /**
     * Define many-to-many relationship with Product model through pivot table
     * 
     * A cart can contain multiple products, and products can be in multiple carts
     * Uses CART_PRODUCT as pivot table with additional data:
     * - product_quantity: How many of this product in the cart
     * - total_amount: Price Ã— quantity for this product
     * 
     * Pivot Table: CART_PRODUCT
     * Local Key: cart_id
     * Foreign Key: product_id
     * 
     * Usage: $cart->products gives collection of products with pivot data
     * Access pivot: $product->pivot->product_quantity
     * 
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function products()
    { 
        return $this->belongsToMany(
            Product::class,           // Related model
            'CART_PRODUCT',          // Pivot table name
            'cart_id',               // Local key in pivot table
            'product_id'             // Foreign key in pivot table
        )->withPivot(['product_quantity','total_amount']); // Include pivot columns
    }

    /**
     * Define relationship with Order model
     * 
     * Each cart can be converted to at most one order
     * This creates a one-to-one relationship where:
     * - A cart becomes an order after checkout
     * - Orders reference their original cart for tracking
     * 
     * Foreign Key: cart_id in ORDER1 table
     * References: cart_id in CART table
     * 
     * Usage: $cart->order returns the Order if cart was checked out
     * 
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function order()  
    { 
        return $this->hasOne(Order::class,'cart_id'); 
    }
}
